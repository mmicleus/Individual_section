/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trackerapp.forms;

import java.io.IOException;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import trackerapp.Lists.ReminderList;
import trackerapp.enums.Reminder;



/**
 *
 * @author micle
 */
public class RemindersForm extends javax.swing.JFrame {

    ReminderList reminderList;
    Thread remindersThread;
    boolean stopThread = false;
    /**
     * Creates new form RemindersForm
     */
    public RemindersForm() {
        initComponents();
        
        reminderList = ReminderList.getInstance();
        initializeBoxes();
    }
    
    public String getMessage(Reminder activity){
        String message = "";
                    switch(activity){
                case WORKOUT:
                    message = "Workout!";
                break;
                case DRINK_WATER:
                    message = "Drink Water!";
                break;
                case EAT_APPLE:
                    message = "Eat Apple!";
                break;
                case GO_WALK:
                    message = "Go for a walk!";
                break;
                case GO_CYCLING:
                    message = "Go Cycling!";
                break;
            }
                    
                    return message;
    }
    

    
    public void initializeBoxes(){
        
        for(Reminder reminder:reminderList.getReminders()){
            switch(reminder){
                case WORKOUT:
                    this.workoutBox.setSelected(true);
                break;
                case DRINK_WATER:
                    this.drinkBox.setSelected(true);
                break;
                case EAT_APPLE:
                    this.eatBox.setSelected(true);
                break;
                case GO_WALK:
                    this.walkBox.setSelected(true);
                break;
                case GO_CYCLING:
                    this.cyclingBox.setSelected(true);
                break;
            }
        }
        
    }
    
    
    public boolean containsReminder(Reminder reminder){
        for(Reminder rem : reminderList.getReminders()){
            if(rem == reminder) return true; 
        }
        
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workoutBox = new javax.swing.JCheckBox();
        drinkBox = new javax.swing.JCheckBox();
        walkBox = new javax.swing.JCheckBox();
        eatBox = new javax.swing.JCheckBox();
        cyclingBox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SaveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        workoutBox.setText("Workout");
        workoutBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workoutBoxActionPerformed(evt);
            }
        });

        drinkBox.setText("Drink Water");
        drinkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drinkBoxActionPerformed(evt);
            }
        });

        walkBox.setText("Go for a walk");
        walkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkBoxActionPerformed(evt);
            }
        });

        eatBox.setText("Eat an apple");
        eatBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eatBoxActionPerformed(evt);
            }
        });

        cyclingBox.setText("Go Cycling");
        cyclingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cyclingBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select one or more reminders:");

        SaveBtn.setText("Save");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(cyclingBox)
                    .addComponent(drinkBox)
                    .addComponent(eatBox)
                    .addComponent(workoutBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(walkBox))
                .addContainerGap(292, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SaveBtn)
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(workoutBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drinkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eatBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(walkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cyclingBox)
                .addGap(18, 18, 18)
                .addComponent(SaveBtn)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void workoutBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workoutBoxActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_workoutBoxActionPerformed

    private void drinkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drinkBoxActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_drinkBoxActionPerformed

    private void walkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkBoxActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_walkBoxActionPerformed

    private void eatBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eatBoxActionPerformed
            // TODO add your handling code here:
    
    }//GEN-LAST:event_eatBoxActionPerformed

    private void cyclingBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cyclingBoxActionPerformed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_cyclingBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        
        if(this.workoutBox.isSelected()){
            if(!containsReminder(Reminder.WORKOUT)) reminderList.addReminder(Reminder.WORKOUT);
        }else{
            if(containsReminder(Reminder.WORKOUT)) reminderList.removeReminder(Reminder.WORKOUT);
        }
        
        
        if(this.drinkBox.isSelected()){
           if(!containsReminder(Reminder.DRINK_WATER)) reminderList.addReminder(Reminder.DRINK_WATER);
        }
        
        else{
          if(containsReminder(Reminder.DRINK_WATER))  reminderList.removeReminder(Reminder.DRINK_WATER);
        }
        
                                              
        // TODO add your handling code here:
        if(this.walkBox.isSelected()){
           if(!containsReminder(Reminder.GO_WALK)) reminderList.addReminder(Reminder.GO_WALK);
        }else{
            if(containsReminder(Reminder.GO_WALK)) reminderList.removeReminder(Reminder.GO_WALK);
        }
        
        
         if(this.eatBox.isSelected()){
           if(!containsReminder(Reminder.EAT_APPLE)) reminderList.addReminder(Reminder.EAT_APPLE);
        }
        else{
           if(containsReminder(Reminder.EAT_APPLE)) reminderList.removeReminder(Reminder.EAT_APPLE);
        }
         
         
        if(this.cyclingBox.isSelected()){
           if(!containsReminder(Reminder.GO_CYCLING)) reminderList.addReminder(Reminder.GO_CYCLING);
        }else{
            
           if(containsReminder(Reminder.GO_CYCLING)) reminderList.removeReminder(Reminder.GO_CYCLING);
        }
         
        try {
            // TODO add your handling code here:
            reminderList.saveReminders();
            this.dispose();
        } 
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }//GEN-LAST:event_SaveBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemindersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemindersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemindersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemindersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RemindersForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveBtn;
    private javax.swing.JCheckBox cyclingBox;
    private javax.swing.JCheckBox drinkBox;
    private javax.swing.JCheckBox eatBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox walkBox;
    private javax.swing.JCheckBox workoutBox;
    // End of variables declaration//GEN-END:variables
}
